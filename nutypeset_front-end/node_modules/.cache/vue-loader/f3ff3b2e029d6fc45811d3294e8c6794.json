{"remainingRequest":"/Users/mcr/Orbital_0628/nutypeset_front-end/node_modules/_vue-loader@15.9.7@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/mcr/Orbital_0628/nutypeset_front-end/node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js??ref--0-0!/Users/mcr/Orbital_0628/nutypeset_front-end/node_modules/_vue-loader@15.9.7@vue-loader/lib/index.js??vue-loader-options!/Users/mcr/Orbital_0628/nutypeset_front-end/src/components/Extracurricular.vue?vue&type=template&id=609611e4&","dependencies":[{"path":"/Users/mcr/Orbital_0628/nutypeset_front-end/src/components/Extracurricular.vue","mtime":1624887998096},{"path":"/Users/mcr/Orbital_0628/nutypeset_front-end/node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js","mtime":1624887994967},{"path":"/Users/mcr/Orbital_0628/nutypeset_front-end/node_modules/_vue-loader@15.9.7@vue-loader/lib/loaders/templateLoader.js","mtime":1624887997791},{"path":"/Users/mcr/Orbital_0628/nutypeset_front-end/node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js","mtime":1624887994967},{"path":"/Users/mcr/Orbital_0628/nutypeset_front-end/node_modules/_vue-loader@15.9.7@vue-loader/lib/index.js","mtime":1624887997791}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}