{"remainingRequest":"/Users/huilin/Orbital/nutypeset_front-end/node_modules/_vue-loader@15.9.7@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/huilin/Orbital/nutypeset_front-end/node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js??ref--0-0!/Users/huilin/Orbital/nutypeset_front-end/node_modules/_vue-loader@15.9.7@vue-loader/lib/index.js??vue-loader-options!/Users/huilin/Orbital/nutypeset_front-end/src/views/Resume/Resume.vue?vue&type=template&id=37892925&","dependencies":[{"path":"/Users/huilin/Orbital/nutypeset_front-end/src/views/Resume/Resume.vue","mtime":1626477479559},{"path":"/Users/huilin/Orbital/nutypeset_front-end/node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js","mtime":1624802120672},{"path":"/Users/huilin/Orbital/nutypeset_front-end/node_modules/_vue-loader@15.9.7@vue-loader/lib/loaders/templateLoader.js","mtime":1624802123696},{"path":"/Users/huilin/Orbital/nutypeset_front-end/node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js","mtime":1624802120672},{"path":"/Users/huilin/Orbital/nutypeset_front-end/node_modules/_vue-loader@15.9.7@vue-loader/lib/index.js","mtime":1624802123696}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}