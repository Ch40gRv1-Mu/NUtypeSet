{"remainingRequest":"/Users/huilin/Orbital/nutypeset_front-end/node_modules/_vue-loader@15.9.7@vue-loader/lib/index.js??vue-loader-options!/Users/huilin/Orbital/nutypeset_front-end/src/views/Resume/Editor.vue?vue&type=style&index=0&lang=stylus&rel=stylesheet%2Fstylus&","dependencies":[{"path":"/Users/huilin/Orbital/nutypeset_front-end/src/views/Resume/Editor.vue","mtime":1626551559375},{"path":"/Users/huilin/Orbital/nutypeset_front-end/node_modules/_css-loader@3.6.0@css-loader/dist/cjs.js","mtime":1624802121346},{"path":"/Users/huilin/Orbital/nutypeset_front-end/node_modules/_vue-loader@15.9.7@vue-loader/lib/loaders/stylePostLoader.js","mtime":1624802123696},{"path":"/Users/huilin/Orbital/nutypeset_front-end/node_modules/_postcss-loader@3.0.0@postcss-loader/src/index.js","mtime":1624802122949},{"path":"/Users/huilin/Orbital/nutypeset_front-end/node_modules/_stylus-loader@3.0.2@stylus-loader/index.js","mtime":1624802123531},{"path":"/Users/huilin/Orbital/nutypeset_front-end/node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js","mtime":1624802120672},{"path":"/Users/huilin/Orbital/nutypeset_front-end/node_modules/_vue-loader@15.9.7@vue-loader/lib/index.js","mtime":1624802123696}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmluLWNvZGVyLXBhbmVsCiAgZmxleC1ncm93IDEKICBkaXNwbGF5IGZsZXgKICBwb3NpdGlvbiByZWxhdGl2ZQoKICAuQ29kZU1pcnJvcgogICAgZmxleC1ncm93IDEKICAgIHotaW5kZXggMQogICAgLkNvZGVNaXJyb3ItY29kZQogICAgICBsaW5lLWhlaWdodCAxOXB4CgogIC5jb2RlLW1vZGUtc2VsZWN0CiAgICBwb3NpdGlvbiBhYnNvbHV0ZQogICAgei1pbmRleCAyCiAgICByaWdodCAxMHB4CiAgICB0b3AgMTBweAogICAgbWF4LXdpZHRoIDEzMHB4Cg=="},{"version":3,"sources":["Editor.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2KA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"Editor.vue","sourceRoot":"src/views/Resume","sourcesContent":["\n<template>\n  <div class=\"in-coder-panel\">\n    <textarea ref=\"textarea\"></textarea>\n    <el-select class=\"code-mode-select\" v-model=\"mode\"\n               @change=\"changeMode\">\n      <el-option v-for=\"mode in modes\"\n                 :key=\"mode.value\" :label=\"mode.label\" :value=\"mode.value\">\n      </el-option>\n    </el-select>\n  </div>\n</template>\n\n<script type=\"text/ecmascript-6\">\n  // 引入全局实例\n  import _CodeMirror from 'codemirror'\n\n  // 核心样式\n  import 'codemirror/lib/codemirror.css'\n  // 引入主题后还需要在 options 中指定主题才会生效\n  import 'codemirror/theme/cobalt.css'\n\n  // 需要引入具体的语法高亮库才会有对应的语法高亮效果\n  // codemirror 官方其实支持通过 /addon/mode/loadmode.js 和 /mode/meta.js 来实现动态加载对应语法高亮库\n  // 但 vue 貌似没有无法在实例初始化后再动态加载对应 JS ，所以此处才把对应的 JS 提前引入\n  import 'codemirror/mode/javascript/javascript.js'\n  import 'codemirror/mode/css/css.js'\n  import 'codemirror/mode/xml/xml.js'\n  import 'codemirror/mode/clike/clike.js'\n  import 'codemirror/mode/markdown/markdown.js'\n  import 'codemirror/mode/python/python.js'\n  import 'codemirror/mode/r/r.js'\n  import 'codemirror/mode/shell/shell.js'\n  import 'codemirror/mode/sql/sql.js'\n  import 'codemirror/mode/swift/swift.js'\n  import 'codemirror/mode/vue/vue.js'\n\n  // 尝试获取全局实例\n  const CodeMirror = window.CodeMirror || _CodeMirror\n\n  export default {\n    name: 'in-coder',\n    props: {\n      // 外部传入的内容，用于实现双向绑定\n      value: String,\n      // 外部传入的语法类型\n      language: {\n        type: String,\n        default: null\n      }\n    },\n    data () {\n      return {\n        // 内部真实的内容\n        code: '',\n        // 默认的语法类型\n        mode: 'javascript',\n        // 编辑器实例\n        coder: null,\n        // 默认配置\n        options: {\n          // 缩进格式\n          tabSize: 2,\n          // 主题，对应主题库 JS 需要提前引入\n          theme: 'cobalt',\n          // 显示行号\n          lineNumbers: true,\n          line: true\n        },\n        // 支持切换的语法高亮类型，对应 JS 已经提前引入\n        // 使用的是 MIME-TYPE ，不过作为前缀的 text/ 在后面指定时写死了\n        modes: [{\n          value: 'css',\n          label: 'CSS'\n        }, {\n          value: 'javascript',\n          label: 'Javascript'\n        }, {\n          value: 'html',\n          label: 'XML/HTML'\n        }, {\n          value: 'x-java',\n          label: 'Java'\n        }, {\n          value: 'x-objectivec',\n          label: 'Objective-C'\n        }, {\n          value: 'x-python',\n          label: 'Python'\n        }, {\n          value: 'x-rsrc',\n          label: 'R'\n        }, {\n          value: 'x-sh',\n          label: 'Shell'\n        }, {\n          value: 'x-sql',\n          label: 'SQL'\n        }, {\n          value: 'x-swift',\n          label: 'Swift'\n        }, {\n          value: 'x-vue',\n          label: 'Vue'\n        }, {\n          value: 'markdown',\n          label: 'Markdown'\n        }]\n      }\n    },\n    mounted () {\n      // 初始化\n      this._initialize()\n    },\n    methods: {\n      // 初始化\n      _initialize () {\n        // 初始化编辑器实例，传入需要被实例化的文本域对象和默认配置\n        this.coder = CodeMirror.fromTextArea(this.$refs.textarea, this.options)\n        // 编辑器赋值\n        this.coder.setValue(this.value || this.code)\n\n        // 支持双向绑定\n        this.coder.on('change', (coder) => {\n          this.code = coder.getValue()\n\n          if (this.$emit) {\n            this.$emit('input', this.code)\n          }\n        })\n\n        // 尝试从父容器获取语法类型\n        if (this.language) {\n          // 获取具体的语法类型对象\n          let modeObj = this._getLanguage(this.language)\n\n          // 判断父容器传入的语法是否被支持\n          if (modeObj) {\n            this.mode = modeObj.label\n          }\n        }\n      },\n      // 获取当前语法类型\n      _getLanguage (language) {\n        // 在支持的语法类型列表中寻找传入的语法类型\n        return this.modes.find((mode) => {\n          // 所有的值都忽略大小写，方便比较\n          let currentLanguage = language.toLowerCase()\n          let currentLabel = mode.label.toLowerCase()\n          let currentValue = mode.value.toLowerCase()\n\n          // 由于真实值可能不规范，例如 java 的真实值是 x-java ，所以讲 value 和 label 同时和传入语法进行比较\n          return currentLabel === currentLanguage || currentValue === currentLanguage\n        })\n      },\n      // 更改模式\n      changeMode (val) {\n        // 修改编辑器的语法配置\n        this.coder.setOption('mode', `text/${val}`)\n\n        // 获取修改后的语法\n        let label = this._getLanguage(val).label.toLowerCase()\n\n        // 允许父容器通过以下函数监听当前的语法值\n        this.$emit('language-change', label)\n      }\n    }\n  }\n</script>\n\n<style lang=\"stylus\" rel=\"stylesheet/stylus\">\n  .in-coder-panel\n    flex-grow 1\n    display flex\n    position relative\n\n    .CodeMirror\n      flex-grow 1\n      z-index 1\n      .CodeMirror-code\n        line-height 19px\n\n    .code-mode-select\n      position absolute\n      z-index 2\n      right 10px\n      top 10px\n      max-width 130px\n</style>"]}]}